{"version":3,"sources":["components/AddCity.js","utils/getIcon.js","components/WeatherCard.js","api/weatherApi.js","components/Forecast.js","components/App.js","serviceWorker.js","index.js"],"names":["AddCity","state","city","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addCity","toLowerCase","react_default","a","createElement","onSubmit","this","type","onChange","placeholder","React","Component","getIcon","id","WeatherCard","_ref","cityInfo","cityWeather","defaults","length","iconID","WeatherIcon","className","EnglishName","Country","ID","build_default","icon","color","size","animate","Temperature","Metric","Value","WeatherText","weatherLocation","axios","create","baseURL","weatherData","weatherForecast","moment","require","Forecast","forecast","cityForecast","slice","template","map","data","dayNum","Date","format","month","day","iconId","Day","Icon","key","EpochDate","Minimum","Maximum","IconPhrase","KEY","App","get","params","apikey","q","then","response","locationInfo","Object","objectSpread","getWeatherData","Key","locationKey","metric","DailyForecasts","toConsumableArray","components_WeatherCard","components_AddCity","components_Forecast","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c1ba1b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass AddCity extends React.Component {\r\n  state = {\r\n    city: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      city: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addCity(this.state.city.toLowerCase());\r\n    this.setState({ city: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.city}\r\n            placeholder=\"Enter a city\"\r\n          />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCity;\r\n","const getIcon = id => {\r\n  if (id >= 12 && id <= 18) {\r\n    return \"RAIN\";\r\n  } else if (id === 25 || id === 26 || id === 29) {\r\n    return \"SLEET\";\r\n  } else if (id === 22 || id === 23 || id === 29 || id === 44) {\r\n    return \"SNOW\";\r\n  } else if (id === 11) {\r\n    return \"FOG\";\r\n  } else if (id >= 1 && id <= 4) {\r\n    return \"CLEAR_DAY\";\r\n  } else if (id >= 5 && id <= 6) {\r\n    return \"PARTLY_CLOUDY_DAY\";\r\n  } else if (id >= 7 && id <= 8) {\r\n    return \"CLOUDY\";\r\n  } else if (id === 32) {\r\n    return \"WIND\";\r\n  } else {\r\n    return \"PARTLY_CLOUDY_DAY\";\r\n  }\r\n};\r\n\r\nexport default getIcon;\r\n","import React from \"react\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport getIcon from \"../utils/getIcon\";\r\n\r\nconst WeatherCard = ({ cityInfo, cityWeather }) => {\r\n  const defaults = {\r\n    icon: \"CLEAR_DAY\",\r\n    color: \"white\",\r\n    size: 100,\r\n    animate: true\r\n  };\r\n\r\n  if (cityInfo.length && cityWeather.length) {\r\n    let iconID = getIcon(cityWeather[0].WeatherIcon);\r\n\r\n    return (\r\n      <div>\r\n        <h2 className=\"weather-box__city\">\r\n          {cityInfo[0].EnglishName} , {cityInfo[0].Country.ID}\r\n        </h2>\r\n        <ReactAnimatedWeather\r\n          icon={iconID}\r\n          color={defaults.color}\r\n          size={defaults.size}\r\n          animate={defaults.animate}\r\n        />\r\n        <p className=\"weather-box__temp\">\r\n          {cityWeather[0].Temperature.Metric.Value} °C\r\n        </p>\r\n        <p className=\"weather-box__desc\">{cityWeather[0].WeatherText}</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>Loading</div>;\r\n  }\r\n};\r\n\r\nexport default WeatherCard;\r\n","import axios from \"axios\";\r\n\r\nexport const weatherLocation = axios.create({\r\n  baseURL: \"https://dataservice.accuweather.com/locations/v1\"\r\n});\r\n\r\nexport const weatherData = axios.create({\r\n  baseURL: \"https://dataservice.accuweather.com/currentconditions/v1/\"\r\n});\r\n\r\nexport const weatherForecast = axios.create({\r\n  baseURL: \"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\"\r\n});\r\n","import React from \"react\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport getIcon from \"../utils/getIcon\";\r\n\r\nconst moment = require(\"moment\");\r\n\r\nconst defaults = {\r\n  icon: \"CLEAR_DAY\",\r\n  color: \"white\",\r\n  size: 50,\r\n  animate: true\r\n};\r\n\r\nconst Forecast = ({ cityForecast }) => {\r\n  const forecast = cityForecast.slice(1);\r\n  const template = forecast.length ? (\r\n    forecast.map(data => {\r\n      let dayNum = moment(data.Date).format(\"D\");\r\n      let month = moment(data.Date).format(\"MMM\");\r\n      let day = moment(data.Date).format(\"ddd\");\r\n      let iconId = getIcon(data.Day.Icon);\r\n\r\n      return (\r\n        <div className=\"sidebar__box\" key={data.EpochDate}>\r\n          <div className=\"sidebar__date\">\r\n            <span>{day}</span>\r\n            <span>\r\n              {dayNum} {month}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            <ReactAnimatedWeather\r\n              icon={iconId}\r\n              color={defaults.color}\r\n              size={defaults.size}\r\n              animate={defaults.animate}\r\n            />\r\n          </div>\r\n          <div className=\"sidebar__forecast\">\r\n            <span>\r\n              {data.Temperature.Minimum.Value} /{\" \"}\r\n              {data.Temperature.Maximum.Value} °C\r\n            </span>\r\n            <span>{data.Day.IconPhrase}</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <div>LOADING</div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"sidebar\">\r\n        <h2>Forecasts</h2>\r\n        {template}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport AddCity from \"./AddCity\";\nimport WeatherCard from \"./WeatherCard\";\nimport {\n  weatherLocation,\n  weatherData,\n  weatherForecast\n} from \"../api/weatherApi\";\nimport Forecast from \"./Forecast\";\n\nconst KEY = \"mGM3TdJw2ez0YnuGGXfpk2Qo3sZg8iD7\";\n\nclass App extends React.Component {\n  state = {\n    cityInfo: [],\n    cityWeather: [],\n    cityForecast: []\n  };\n\n  componentDidMount() {\n    this.addCity(\"London\");\n  }\n\n  addCity = e => {\n    weatherLocation\n      .get(\"/cities/search\", {\n        params: { apikey: KEY, q: e }\n      })\n      .then(response => {\n        let locationInfo = response.data[0];\n        let data = [{ ...locationInfo }];\n        this.setState({ cityInfo: data });\n        this.getWeatherData(locationInfo.Key);\n      });\n  };\n\n  getWeatherData = locationKey => {\n    weatherData\n      .get(locationKey, {\n        params: { apikey: KEY }\n      })\n      .then(response => {\n        let weatherData = response.data[0];\n        let data = [{ ...weatherData }];\n        this.setState({ cityWeather: data });\n      });\n\n    weatherForecast\n      .get(locationKey, {\n        params: { apikey: KEY, metric: true }\n      })\n      .then(response => {\n        let weatherForecast = response.data.DailyForecasts;\n        let data = [...weatherForecast];\n        this.setState({ cityForecast: data });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center\">Weather App</h1>\n        <div className=\"subs\">\n          <p>Created by Carlo Anselmi</p>\n        </div>\n        <div className=\"weather-box\">\n          <div className=\"weather-box__today\">\n            <WeatherCard\n              cityWeather={this.state.cityWeather}\n              cityInfo={this.state.cityInfo}\n            />\n            <AddCity addCity={this.addCity} />\n          </div>\n          <div className=\"weather-box__forecast\">\n            <Forecast cityForecast={this.state.cityForecast} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}